using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace CarSalesArea.Data.Helpers
{
    /// <summary>A class to load SQL scripts from embedded resource.</summary>
    /// <remarks>
    /// This class helps to replace autogenerated class from resx file.
    /// Due to the bug in .net core, resources are not properly built
    /// by dotnet build command.
    /// In order to add new script, put the sql file into Resources folder and
    /// make resource Embedded. Then add corresponding getter to this class.
    /// </remarks>
    public static class ScriptLoader
    {
        private const string DefaultPath = "Resources";

        /// <summary>Method returns a SQL script from the embedded resource.</summary>
        /// <typeparam name="T">Class from project with sql script, it will be used to access an assembly.</typeparam>
        /// <param name="resourceName">Parameter is populated by the name of calling method,
        /// should be equal to file name without extension.
        /// </param>
        /// <returns>SQL script from the embedded resource.</returns>
        public static string GetEmbeddedResource<T>([CallerMemberName] string resourceName = null) => ScriptLoader.GetEmbeddedResourceByPath<T>("Resources", resourceName);

        /// <summary>
        /// Method returns a SQL script from the embedded resource by specified path.
        /// </summary>
        /// <typeparam name="T">Class from project with sql script, it will be used to access an assembly.</typeparam>
        /// <param name="path">Resource path in project hierarchy. Point should be used as separator.</param>
        /// <param name="resourceName">Parameter is populated by the name of calling method,
        /// should be equal to file name without extension.
        /// </param>
        /// <returns>SQL script from the embedded resource.</returns>
        public static string GetEmbeddedResourceByPath<T>(string path, [CallerMemberName] string resourceName = null)
        {
            try
            {
                if (string.IsNullOrEmpty(path))
                {
                    throw new ArgumentNullException(nameof(path), "Argument is null or empty");
                }

                if (string.IsNullOrEmpty(resourceName))
                {
                    throw new ArgumentNullException(nameof(resourceName), "Argument is null or empty");
                }

                Assembly assembly = typeof(T).Assembly;
                using (Stream manifestResourceStream = assembly.GetManifestResourceStream(assembly.GetName().Name + "." + path + "." + resourceName + ".sql"))
                {
                    if (manifestResourceStream == null)
                        throw new ArgumentException("Resource not found", resourceName);
                    using (StreamReader streamReader = new StreamReader(manifestResourceStream))
                        return streamReader.ReadToEnd();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        /// <summary>
        /// Method returns a SQL script from the embedded resource with lazy loading.
        /// </summary>
        /// <typeparam name="T">Class from project with sql script, it will be used to access an assembly.</typeparam>
        /// <param name="resourceName">Parameter is populated by the name of calling method,
        /// should be equal to file name without extension.
        /// </param>
        /// <returns>SQL script from the embedded resource.</returns>
        public static Lazy<string> GetLazyEmbeddedResource<T>([CallerMemberName] string resourceName = null) => new Lazy<string>((Func<string>)(() => ScriptLoader.GetEmbeddedResource<T>(resourceName)), true);

        /// <summary>
        /// Method returns a SQL script from the embedded resource by specified path with lazy loading.
        /// </summary>
        /// <typeparam name="T">Class from project with sql script, it will be used to access an assembly.</typeparam>
        /// <param name="path">Resource path in project hierarchy. Point should be used as separator.</param>
        /// <param name="resourceName">Parameter is populated by the name of calling method,
        /// should be equal to file name without extension.
        /// </param>
        /// <returns>SQL script from the embedded resource.</returns>
        public static Lazy<string> GetLazyEmbeddedResourceByPath<T>(
          string path,
          [CallerMemberName] string resourceName = null)
        {
            return new Lazy<string>((Func<string>)(() => ScriptLoader.GetEmbeddedResourceByPath<T>(path, resourceName)), true);
        }
    }
}
